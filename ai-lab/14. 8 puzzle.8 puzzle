from collections import deque

class Puzzle:
    def __init__(self, start, goal):
        self.start = start
        self.goal = goal

    def is_valid(self, x, y):
        return 0 <= x < 3 and 0 <= y < 3

    def get_neighbors(self, state):
        neighbors = []
        x, y = [(ix, iy) for ix, row in enumerate(state) for iy, i in enumerate(row) if i == 0][0]
        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]
        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            if self.is_valid(nx, ny):
                new_state = [row[:] for row in state]
                new_state[x][y], new_state[nx][ny] = new_state[nx][ny], new_state[x][y]
                neighbors.append(new_state)
        return neighbors

    def bfs(self):
        queue = deque([(self.start, [])])
        visited = set()
        while queue:
            state, path = queue.popleft()
            if state == self.goal:
                return path
            state_tuple = tuple(tuple(row) for row in state)
            if state_tuple in visited:
                continue
            visited.add(state_tuple)
            for neighbor in self.get_neighbors(state):
                queue.append((neighbor, path + [neighbor]))
        return None

def print_puzzle(state):
    for row in state:
        print(" ".join(str(i) for i in row))
    print()

start_state = [[1, 2, 3], [4, 0, 5], [6, 7, 8]]
goal_state = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]

puzzle = Puzzle(start_state, goal_state)
solution = puzzle.bfs()

if solution:
    print("Steps to solve the puzzle:")
    for step in solution:
        print_puzzle(step)
else:
    print("No solution found")
